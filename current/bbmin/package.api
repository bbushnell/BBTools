#version 1
#package bbmin
#generated 2025-09-06T20:35:14

<class Minimizer>
*Generates an array of minimal hash codes (as positive 64-bit longs) for an input sequence.
*The resulting array is guaranteed to contain the minimal hash code
*for every window, with no duplicates.
*On average this is expected to yield 2*(L-K)/W hash codes for sequence length L and window size W.
*@author Brian Bushnell
*@date October 8, 2021
public class Minimizer

#Fields
public final int k

public final int window

public final int bitsPerSymbol

private final int shift

private final int shift2

private final long mask

private final long minCode=0

static final byte[] baseToNumber=new byte[128]

static final byte[] baseToComplementNumber=new byte[128]


#Methods
public static void main(String[] args)

public Minimizer(int k_, int window_)

public Minimizer(int k_, int window_, int bitsPerSymbol_)

public long[] minimize(String str)

public long[] minimize(byte[] bases)

*This method is typically faster since you don't need to construct a new set each time.
public long[] minimize(byte[] bases, LongList list, LongHashSet set)

public static long canon(long kmer, long rkmer)

public static long hash(long kmer, long rkmer)

public static long hash(long key)

private static final long max(long x, long y)

</class Minimizer>
