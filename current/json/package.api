#version 1
#package json
#generated 2025-09-06T20:37:30

<class JsonLiteral>
public class JsonLiteral

#Fields
private final String s


#Methods
public JsonLiteral(String s_)

public JsonLiteral(double value, int decimals)

@Override public String toString()

</class JsonLiteral>
<class JsonObject>
*Custom JSON object implementation for BBTools output formatting. Preserves key insertion
*order and supports nested objects, arrays, and literal values for numeric formatting.
*@author Brian Bushnell
*@date Pre-2020 (before Java built-in JSON support)
*@documentation Eru
public class JsonObject

#Fields
*Map for storing key-value pairs where values are primitives, arrays, or other objects
public LinkedHashMap<String,Object> omap

*Map for storing key-value pairs where values are nested JsonObjects
public LinkedHashMap<String,JsonObject> jmap

*Global setting for restricting decimal places in numeric output (-1 = no restriction)
private static int restictDecimals=-1

*Format string for decimal output based on restictDecimals setting
private static String decimalFormat="%." + restictDecimals + "f"

*Multiplier for indentation padding (number of spaces per level)
public static final int padmult=3

*If true, arrays are formatted without newlines for more compact output
public static boolean noNewlinesInArrays=false


#Methods
*Test method demonstrating JsonObject usage and nested object creation.
*Creates a hierarchy of JsonObjects and demonstrates various add operations,
*including object nesting and value replacement.
*@param args Command line arguments (unused)
public static void main(String[] args)

*Creates an empty JsonObject with no initial key-value pairs.
public JsonObject()

*Creates a JsonObject with a single initial key-value pair.
*@param key The initial key to add
*@param value The initial value to associate with the key
public JsonObject(String key, Object value)

*Adds a formatted numeric value with specified decimal places as a literal.
*The value will be output in JSON without quotes, formatted to the specified precision.
*@param key0 The key to associate with the value
*@param value The numeric value to add
*@param decimals Number of decimal places to include in the formatted output
public void addLiteral(String key0, double value, int decimals)

*Adds a string value as a literal (without quotes in JSON output).
*WARNING: This method should be used with caution as it can produce
*incorrectly formatted JSON files if the string contains special characters.
*@param key0 The key to associate with the value
*@param value The string value to add as a literal
public void addLiteral(String key0, String value)

*Adds a key-value pair to this JsonObject, replacing any existing value.
*@param key0 The key to add
*@param value The value to associate with the key
public void add(String key0, Object value)

*Adds a key-value pair to this JsonObject, renaming the key if it already exists.
*If the key exists, appends " 2", " 3", etc. to make it unique.
*@param key0 The base key to add
*@param value The value to associate with the key
public void addAndRename(String key0, Object value)

*Internal method for adding objects with replacement or renaming behavior.
*@param key0 The base key name
*@param value The value to add
*@param replace If true, replaces existing values; if false, renames key to avoid conflicts
private void add(String key0, Object value, boolean replace)

*Adds a JsonObject as a nested object, replacing any existing value.
*@param key0 The key to add
*@param value The JsonObject to nest under this key
public void add(String key0, JsonObject value)

*Adds a JsonObject as a nested object, renaming the key if it already exists.
*@param key0 The base key to add
*@param value The JsonObject to nest under this key
public void addAndRename(String key0, JsonObject value)

*Internal method for adding JsonObjects with replacement or renaming behavior.
*@param key0 The base key name
*@param value The JsonObject to add
*@param replace If true, replaces existing values; if false, renames key to avoid conflicts
private void add(String key0, JsonObject value, boolean replace)

*Converts a list of JsonObjects to a JSON array string representation.
*Objects are separated by commas and newlines for readability.
*@param list The list of JsonObjects to convert
*@return JSON array string representation
public static String toString(ArrayList<JsonObject> list)

*Converts this JsonObject to formatted text using default parameters.
*@return ByteBuilder containing the formatted JSON text
public ByteBuilder toText()

*Converts this JsonObject to formatted text with specified parameters.
*@param sb ByteBuilder to append to (created if null)
*@param level Indentation level for pretty-printing
*@param inArray Whether this object is inside an array (affects formatting)
*@return ByteBuilder containing the formatted JSON text
public ByteBuilder toText(ByteBuilder sb, int level, boolean inArray)

*Converts this JsonObject to a string with a named wrapper.
*Creates a JSON object with the specified name containing this object.
*@param name The name to use as the wrapper key
*@return JSON string with named wrapper
public String toString(String name)

*Converts an array of objects to JSON array string representation.
*@param array The array to convert to JSON
*@return JSON array string
public static String toString(Object[] array)

*Returns the JSON string representation of this object.
*@return Formatted JSON string
@Override public String toString()

*Returns the JSON string representation with a trailing newline.
*@return Formatted JSON string with newline
public String toStringln()

*Appends this JsonObject's formatted representation to a ByteBuilder.
*Handles indentation, comma placement, and nested structure formatting.
*@param level Current indentation level for pretty-printing
*@param sb ByteBuilder to append the formatted JSON to
*@param inArray Whether this object is being rendered inside an array (affects formatting)
public void append(int level, ByteBuilder sb, boolean inArray)

*Appends a key-value entry to the ByteBuilder in JSON format.
*Helper method that combines key and value formatting.
*@param sb ByteBuilder to append to
*@param key The key to format and append
*@param value The value to format and append
*@param level Current indentation level
*@param inArray Whether formatting is within an array context
private static void appendEntry(ByteBuilder sb, String key, Object value, int level, boolean inArray)

*Appends a JSON key to the ByteBuilder with proper formatting.
*Adds quotes around the key and the colon separator.
*@param sb ByteBuilder to append to
*@param key The key string to format and append
private static void appendKey(ByteBuilder sb, String key)

*Appends a value to the ByteBuilder with appropriate JSON formatting.
*Handles type detection and applies correct formatting rules for each type.
*Supports strings, numbers, booleans, null, arrays, collections, and nested objects.
*@param sb ByteBuilder to append to
*@param value The value to format (may be null)
*@param level Current indentation level for nested structures
*@param inArray Whether this value is being formatted within an array
private static void appendValue(ByteBuilder sb, Object value, int level, boolean inArray)

*Appends an Object array to the ByteBuilder in JSON array format.
*Elements are separated by commas and spaces for readability.
*@param sb ByteBuilder to append to
*@param array The Object array to format (may be null)
*@param level Current indentation level for nested elements
private static void appendArray(ByteBuilder sb, Object[] array, int level)

*Appends a Collection to the ByteBuilder in JSON array format.
*Similar to appendArray but works with any Collection type.
*@param sb ByteBuilder to append to
*@param stuff The Collection to format (may be null)
*@param level Current indentation level for nested elements
private static void appendCollection(ByteBuilder sb, Collection<?> stuff, int level)

*Retrieves a String value associated with the specified key.
*@param key The key to look up
*@return The String value, or null if key doesn't exist or omap is null
*@throws AssertionError if the value exists but is not a String
public String getString(String key)

*Retrieves a Long value associated with the specified key.
*@param key The key to look up
*@return The Long value, or null if key doesn't exist or omap is null
*@throws AssertionError if the value exists but is not a Long
public Long getLong(String key)

*Retrieves an Integer value associated with the specified key.
*@param key The key to look up
*@return The Integer value, or null if key doesn't exist
*@throws AssertionError if omap is null or the value exists but is not an Integer
public Integer getInt(String key)

*Checks whether this JsonObject contains the specified key.
*Searches both the object map (omap) and JsonObject map (jmap).
*@param key The key to search for
*@return true if the key exists in either map, false otherwise
public boolean containsKey(String key)

*Retrieves a Double value associated with the specified key.
*Automatically converts Long values to Double if needed.
*@param key The key to look up
*@return The Double value, or null if key doesn't exist or omap is null
*@throws AssertionError if the value exists but is not a Double or Long
public Double getDouble(String key)

*Retrieves a Number value associated with the specified key.
*Accepts Double, Long, Integer, or Float values.
*@param key The key to look up
*@return The Number value, or null if key doesn't exist or omap is null
*@throws AssertionError if the value exists but is not a supported Number type
public Number getNumber(String key)

*Retrieves an Object array associated with the specified key.
*@param key The key to look up
*@return The Object array, or null if key doesn't exist or omap is null
*@throws AssertionError if the value exists but is not an Object array
public Object[] getArray(String key)

*Retrieves a nested JsonObject associated with the specified key.
*@param key The key to look up
*@return The JsonObject, or null if key doesn't exist or jmap is null
public JsonObject getJson(String key)

*Removes and returns a nested JsonObject associated with the specified key.
*@param key The key to remove
*@return The removed JsonObject, or null if key doesn't exist or jmap is null
public JsonObject removeJson(String key)

*Removes and returns an Object associated with the specified key.
*@param key The key to remove
*@return The removed Object, or null if key doesn't exist or omap is null
public Object removeObject(String key)

*Clears all nested JsonObjects by setting jmap to null.
public void clearJson()

*Clears all objects by setting omap to null.
public void clearOmap()

*Converts the nested JsonObject map to an array of JsonObjects.
*@return Array of JsonObjects from jmap, or null if jmap is null
public Object[] toJmapArray()

*Returns the number of entries in the nested JsonObject map.
*@return Size of jmap, or 0 if jmap is null
public int jmapSize()

*Returns the number of entries in the object map.
*@return Size of omap, or 0 if omap is null
public int omapSize()

*Sets the global decimal precision for numeric output.
*@param d Number of decimal places to display (-1 for no restriction)
public static void setDecimals(int d)

</class JsonObject>
<class JsonParser>
*How to use this class:
*1) Create one instance per thread
*2) set() some Json text
*3) Call either parseJsonObject or parseJsonArray
*@author Brian Bushnell
public class JsonParser

#Fields
byte[] text

int pos=0

boolean errorState

*Always false except when testing
private static final boolean verbose=false

private static final PrintStream outstream=System.err

private static final Exception INVALID_JSON=new Exception("Invalid Json")


#Methods
*For testing
public static void main(String[] args)

public JsonParser()

public JsonParser(String s)

public JsonParser(byte[] s)

public static JsonObject parseJsonObjectStatic(String s)

public JsonParser set(byte[] s)

public JsonObject parseJsonObject(String s)

public JsonObject parseJsonObject(byte[] s)

public Object[] parseJsonArray(String s)

public Object[] parseJsonArray(byte[] s)

public JsonObject parseJsonObject()

public Object[] parseJsonArray()

public boolean validate()

*This handles cases when the value is not surrounded by quotes.
private Object bufferToObject(ByteBuilder bb)

*Not strictly correct, but allows t and f
private static boolean parseBoolean(String s)

*Create a JsonObject from { to the next }
private JsonObject makeObject()

*Create an array from [ to the next ]
private Object[] makeArray()

</class JsonParser>
