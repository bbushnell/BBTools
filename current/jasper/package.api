#version 1
#package jasper
#generated 2025-09-06T20:37:11

<class KmerPosition>
*Read in file of high-throughput reads and report the positions at which kmers from reference start
*@author Jasper Toscani Field
*@date Jun 4, 2020
public class KmerPosition

#Fields
private String in1=null

private String in2=null

private String out1=null

private String ref=null

private final FileFormat ffin1

private final FileFormat ffin2

private final FileFormat ffout1

private final FileFormat ffref

private long maxReads=-1

private boolean errorState=false

private int k=6

private LongList counts1=new LongList()

private LongList totalEncounter1=new LongList()

private LongList counts2=new LongList()

private LongList totalEncounter2=new LongList()

private java.io.PrintStream outstream=System.err

public static boolean verbose=false


#Methods
public static void main(String[] args)

public KmerPosition(String[] args)

void process(Timer t)

private void outputResults(LongList posCounts1, LongList readCounts1, LongList posCounts2, LongList readCounts2)

private HashSet<String> kmerReturn()

private int addToSet(HashSet<String> hs, Read r)

private LongList processRead(Read r, HashSet<String> hs, LongList count, LongList readCount)

</class KmerPosition>
<class KmerPosition3>
*Read in file of high-throughput reads sequences and a reference sequence file
*report the positions in the reads that are the start of a matching kmer sequence
*between the read and the reference sequence.
*This is useful for identifying over-representation of kmers at a particular position in reads.
*read = ACGTA
*reference = ATGTACC
*kmer length = 3
*match = GTA, beginning in the read at position 2 (zero indexed).
*returned info = #positions, #number of kmers beginning at that position,
*#percentage of reads with kmers beginning at that positons.
*@author Jasper Toscani Field
*@date Jun 4, 2020
public class KmerPosition3

#Fields
*Primary input file for high-throughput read sequences.
private String in1=null

*Paired-end read input file. Only use if this file contains the mates of in1.
private String in2=null

*Output file name. This file will contain all output statistics of kmer positioning and counts.
private String out1=null

*Reference sequence file. This file should be .fasta format and
*contain reference sequences you wish to be identified in the read files.
private String ref=null

*File format structure FileFormat for in1.
*This is used to parse the input file type if possible and provide methods.
private final FileFormat ffin1

*File format structure FileFormat for in2.
*This is used to parse the input file type if possible and provide methods.
private final FileFormat ffin2

*File format structure FileFormat for out1. This provides methods and structure to the output.
private final FileFormat ffout1

*File format structure of ref.
*This provides methods and structure for the reference file assuming its in FASTA format.
private final FileFormat ffref

*Variable for the number of reads to analyze. If set to -1, all reads will be used.
private long maxReads=-1

*Boolean variable that changes to true if an error has occurred.
*This will cause the program to exit with 1 status.
private boolean errorState=false

*Add reverse-complemented kmers to the hashset
private boolean rcomp=true

*Variable for kmer length. Can be changed on the commandline with the k=# flag.
private int k=19

*List of long containing counts of kmers starting at each nucleotide in a read for read set 1.
private LongList matchCounts1=new LongList()

*List of Long containing counts of reads that have nucleotides at a each position for read set 1.
private LongList totalCounts1=new LongList()

*List of Long containing counts of kmers starting at each nucleotide in a read for read set 2.
private LongList matchCounts2=new LongList()

*List of Long containing counts of reads that have nucleotides at a each position for read set 2.
private LongList totalCounts2=new LongList()

*Output stream that output statistics are piped through to the output file.
private java.io.PrintStream outstream=System.err

*Verbose commandline flag variable. If set to true, will print additional program information.
public static boolean verbose=false


#Methods
public static void main(String[] args)

*Handles pre-parsing and parsing of user flags.
*Reads in the read file(s) and the reference files.
*Sets the maximum number of reads to be processed.
*@param args string of the arguments input at the commandline.
public KmerPosition3(String[] args)

*Primary processing function. Begins the read stream on a thread,
*passes reads to kmer production and bit-shifting methods.
*Completes after writing kmer statistics to file, halting and
*reporting the timer and reporting any error states.
*@param t Timer object for the program. The timer has already been started and is non-null.
void process(Timer t)

*This function converts the list of counts for kmers found at each position in both read sets and
*the positions that have reads of length reaching that position, to arrays.
*The statistics of the analyses are written to the output file.
*@param posCounts1 list of length of the reads, tracking the number of kmers found beginning at each position for readset 1.
*@param readCounts1 list of max length of the reads, tracking the number of reads with nucleotides at that position for readset 1.
*@param posCounts2 Same for readset 2.
*@param readCounts2 Same for readset 2.
private void outputResults(LongList posCounts1, LongList readCounts1, LongList posCounts2, LongList readCounts2)

*This method produces a LongHashSet containing all forward kmers of length k found in the reference file
*reference kmers are converted to bytes for faster, memory efficient comparison to read kmers
*@return A set of reference kmers
private LongHashSet loadReference()

*This method separates the reference sequence into kmers before converting each kmer to bytes
*The converted kmers are added to the hashset and returned to the main method for final comparison
*@param hs hashset that will hold the kmers after conversion to bytes
*@param r the reference sequence
*@return Number of kmers added to hashset
private int addToSet(LongHashSet hs, Read r)

*This method performs byte shifting to perform very fast comparison of kmers from the reads and
*compares read kmers to reference kmers. If identical byte-kmers are found, increment the appropriate counts.
*Also, increment the count if a valid nucleotide is at that position in the read.
*@param r read sequence
*@param hs set of kmer sequences from the reference
*@param matchCounts list of counts of the number of kmers found starting at each position
*@param totalCounts list of counts of reads with nucleotides at each position
private void processRead(Read r, LongHashSet hs, LongList matchCounts, LongList totalCounts)

</class KmerPosition3>
