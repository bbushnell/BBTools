// QuantumAligner.java API Documentation
// Generated: September 9, 2025
// Purpose: Alignment algorithm that aligns two sequences to return ANI (Average Nucleotide Identity)

CLASS: QuantumAligner implements IDAligner
PACKAGE: aligner
AUTHOR: Brian Bushnell
CONTRIBUTORS: Isla, Zephy
DATE: April 24, 2025

DESCRIPTION:
- Aligns two sequences to return ANI (Average Nucleotide Identity)
- Uses only 2 arrays and avoids traceback for efficiency
- Gives exact answers with precise rstart and rstop calculation
- Limited to sequences up to 2Mbp with 21 position bits
- Can create visualizations when output file is defined

CORE METHODS:
1. alignStatic(byte[] query, byte[] ref, int[] posVector)
   - Static method for aligning two sequences
   - Returns: float (identity from 0.0-1.0)
   - Parameters: 
     * query: Query sequence as byte array
     * ref: Reference sequence as byte array  
     * posVector: Optional int[2] for returning {rStart, rStop} alignment bounds
   - If posVector is null, sequences may be swapped so query is shorter
   
2. align(byte[] a, byte[] b) 
   - Instance method wrapper for alignStatic
   - Returns: float (identity score)
   
3. align(byte[] a, byte[] b, int[] pos)
   - Instance method with position tracking
   - Returns: float (identity score)
   - pos: int array to receive alignment positions

4. name()
   - Returns: String "Quantum" (algorithm identifier)

INTERNAL METHODS:
- decideBandwidth(byte[] query, byte[] ref): Determines optimal bandwidth for alignment
- Creates Visualizer instance when output file is defined for debugging

CONSTRAINTS:
- Reference sequence length must be <= POSITION_MASK
- Optimized for high-identity alignments with minimal indels
- Uses adaptive bandwidth calculation based on sequence properties

WEB INTEGRATION NOTES:
- Primary method: alignStatic(query, ref, posVector)
- Input: Two DNA/RNA sequences as byte arrays
- Output: Identity score (0.0-1.0) plus optional alignment boundaries
- Visualization: Can generate alignment matrix visualizations when configured